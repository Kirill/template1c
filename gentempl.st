{1,
{5,
{"Стандартные",1,0,"",""},
{16,
{"Управляющие",1,0,"",""},
{0,
{"Ес",0,0,"Ес","Если <?> Тогда
	
КонецЕсли;"}
},
{0,
{"ЕсИ",0,0,"Еси","Если <?> Тогда
	
Иначе
	
КонецЕсли;"}
},
{0,
{"Пока",0,0,"Пока","Пока <?""Условие""> Цикл
	<?>
КонецЦикла;"}
},
{0,
{"Для",0,0,"Для","Для Инд = 1 По <?""Ограничение""> Цикл
	<?>
КонецЦикла;"}
},
{0,
{"Для каждого",0,0,"Дляк","Для Каждого Стр Из <?""Коллекция""> Цикл
	<?>
КонецЦикла;"}
},
{0,
{"Для каждого (ключ-значение)",0,0,"Длякк","Для Каждого КлючЗначение Из <?""Коллекция""> Цикл
	<?>
КонецЦикла;"}
},
{0,
{"Процедура",0,0,"Проц[едура]","// Описание процедуры
//
// Параметры:
//	параметр1		- Тип			- описание параметра
//	параметр2		- Тип			- описание параметра
Процедура <?""Имя процедуры"">()

	<?>

КонецПроцедуры
"}
},
{0,
{"Процедура",0,0,"Процк","// Процедура 
// 
// Параметры:
//
Процедура <?""Имя процедуры"">()

	<?>

КонецПроцедуры
"}
},
{0,
{"Функция",0,0,"Функк","// Функция 
// 
// Параметры:
//
Функция <?""Имя функции"">()

	<?>

КонецФункции 
"}
},
{0,
{"Функция",0,0,"Функ[ция]","// Описание функции
//
// Параметры:
//	параметр1		- Тип			- описание параметра
//	параметр2		- Тип			- описание параметра
// 
// Результат 		- Тип			- описание результата
Функция <?""Имя функции"">()

	<?>

КонецФункции 
"}
},
{0,
{"Возврат",0,0,"","Возврат;<?>"}
},
{0,
{"Попытка",0,0,"Поп","Попытка
	<?>
Исключение
КонецПопытки;"}
},
{0,
{"ИначеЕ",0,0,"ИначеЕ","ИначеЕсли <?> Тогда"}
},
{0,
{"Наи",0,0,"Наи","Наименование"}
},
{0,
{"Воз",0,0,"воз","Предупреждение(""<?>"");
Возврат;"}
},
{0,
{"дляко",0,0,"дляко","Для Каждого Оформление Из ОформленияСтрок Цикл
	ДанныеСтроки = Оформление.ДанныеСтроки;
	Ячейки		 = Оформление.Ячейки;
	<?>
КонецЦикла; 
"}
}
},
{11,
{"Прикладные",1,0,"",""},
{0,
{"Значение перечисления",0,0,"Пер\","Перечисления.<?"""", ЗначениеПеречисления>"}
},
{3,
{"Константы",1,0,"",""},
{0,
{"Получить/установить",0,0,"Конст[анты]","Константы.<?"""", Константа>.<?""Выбор метода"", ВыборВарианта, ""Получить"", ""Получить"", ""Установить"", ""Установить"">()"}
},
{0,
{"Установить",0,0,"","Константы.<?"""", Константа>.Установить(<?>);"}
},
{0,
{"Получить",0,0,"","Константы.<?"""", Константа>.Получить()"}
}
},
{2,
{"Справочники",1,0,"",""},
{0,
{"Обход элементов",0,0,"обспр","Спр = Справочники.<?"""", Справочник>.Выбрать();
Пока Спр.Следующий() Цикл
	<?>
КонецЦикла;"}
},
{0,
{"Обход элементов иерархически",0,0,"обспри","Спр = Справочники.<?"""", Справочник>.ВыбратьИерархически();
Пока Спр.Следующий() Цикл
	<?>
КонецЦикла;"}
}
},
{2,
{"Документы",1,0,"",""},
{0,
{"Обход документов",0,0,"обдок","Док = Документы.<?"""", Документ>.Выбрать();
Пока Док.Следующий() Цикл
	<?>
КонецЦикла;"}
},
{0,
{"Движения",0,0,"движ","Движения.<?""Выбор регистра"", ОбъектМетаданных, ""РегистрСведений"", ""РегистрНакопления"", ""РегистрБухгалтерии"", ""РегистрРасчета"">"}
}
},
{1,
{"Отчеты",1,0,"",""},
{0,
{"Открыть отчет",0,0,"отч\","Отчеты.<?"""", Отчет>.ПолучитьФорму().Открыть();"}
}
},
{1,
{"Обработки",1,0,"",""},
{0,
{"Открыть обработку",0,0,"обр\","Обработки.<?"""", Обработка>.ПолучитьФорму().Открыть();"}
}
},
{1,
{"Планы видов характеристик",1,0,"",""},
{0,
{"Обход видов характеристик",0,0,"обпвх","ПВХ = ПланыВидовХарактеристик.<?"""", ПланВидовХарактеристик>.Выбрать();
Пока ПВХ.Следующий() Цикл
	<?>
КонецЦикла;"}
}
},
{1,
{"Планы счетов",1,0,"",""},
{0,
{"Найти по коду",0,0,"","ПланыСчетов.<?"""", ПланСчетов>.НайтиПоКоду(<?>)"}
}
},
{1,
{"Планы видов расчета",1,0,"",""},
{0,
{"Обход видов расчета",0,0,"","в = ПланыВидовРасчета.<?"""", ПланВидовРасчета>.Выбрать();
Пока в.Следующий() Цикл
	<?>
КонецЦикла;"}
}
},
{1,
{"Бизнес-процессы",1,0,"",""},
{0,
{"Обход бизнес-процессов",0,0,"","в = БизнесПроцессы.<?"""", БизнесПроцесс>.Выбрать();
Пока в.Следующий() Цикл
	<?>
КонецЦикла;"}
}
},
{1,
{"Задачи",1,0,"",""},
{0,
{"Обход задач",0,0,"обзад","в = Задачи.<?"""", Задача>.Выбрать();
Пока в.Следующий() Цикл
	<?>
КонецЦикла;"}
}
}
},
{92,
{"Прочие",1,0,"",""},
{0,
{"ЗначениеНеЗаполнено",0,0,"ЗначениеНеЗаполнено","Функция ЗначениеНеЗаполнено(Значение) Экспорт

	Результат = Ложь;
	ТипЗначения = ТипЗнч(Значение);

	// Сначала примитивные типы
	Если Значение = Неопределено Тогда
		Результат = Истина;
	ИначеЕсли Значение = NULL Тогда
		Результат = Истина;
	ИначеЕсли ТипЗначения = Тип(""Строка"") Тогда
		Если СокрЛП(Значение) = """" Тогда
			Результат = Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения = Тип(""Число"") Тогда
		Если Значение = 0 Тогда
			Результат = Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения = Тип(""Дата"") Тогда
		Если Значение = Дата('00010101') Тогда
			Результат = Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения = Тип(""Булево"") Тогда
		Результат = Ложь; // Булево будем считать не пустым
		
	//Отдельное определение, так как конструкторов данного типа не существует	
	ИначеЕсли ТипЗначения = Тип(""РежимПроведенияДокумента"") Тогда
		Если Значение = РежимПроведенияДокумента.Неоперативный или Значение = РежимПроведенияДокумента.Оперативный тогда
			Результат = Ложь;
		КонецЕсли;
		
	// Для остальных будем считать значение пустым, если оно равно
	// дефолтному значению своего типа
	Иначе
		Попытка
			Если Значение = Новый(ТипЗначения) Тогда
				Результат = Истина;
			КонецЕсли; 
		Исключение
			Результат = Ложь;
		КонецПопытки;
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции // ЗначениеНеЗаполнено()
"}
},
{0,
{"Неопределено",0,0,"хз","Неопределено"}
},
{0,
{"Формат",0,0,"Формат","Формат(<?>, ""<?, ФорматнаяСтрока>"")"}
},
{0,
{"Форматная строка",0,0,"","""<?, ФорматнаяСтрока>"""}
},
{0,
{"Запрос",0,0,"Запр","Запрос = Новый Запрос(""
|ВЫБРАТЬ  
|   <?>
|ИЗ 
|
|ГДЕ
|   = &
|"");

Запрос.УстановитьПараметр("""", );

Выборка = Запрос.Выполнить().Выбрать();
Пока Выборка.Следующий() Цикл

КонецЦикла;
"}
},
{0,
{"Запрос с параметром",0,0,"Запрп","Запрос = Новый Запрос;
Запрос.Текст = ""<?"""", ТекстЗапроса>"";

Запрос.УстановитьПараметр(""<?>"", );

Выборка = Запрос.Выполнить().Выбрать();
Пока Выборка.Следующий() Цикл

КонецЦикла;
"}
},
{0,
{"Построитель отчета",0,0,"постр","Построитель = Новый ПостроительОтчета;
Построитель.Текст = ""<?""Текст запроса"", ТекстЗапроса>"";

Построитель.ЗаполнитьНастройки();

Построитель.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);

Построитель.Выполнить();
Построитель.Вывести();
"}
},
{0,
{"Вопрос",0,0,"Вопр[ос]","Вопрос(""<?""Текст вопроса"">"", <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">)"}
},
{0,
{"Вопрос с анализом результата",0,0,"Вопр[ос]","Вопрос(""<?""Текст вопроса"">"", <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">) = <?""Код возврата диалога"", ВыборВарианта, ""Да"", ""КодВозвратаДиалога.Да"", ""Нет"", ""КодВозвратаДиалога.Нет"", ""ОК"", ""КодВозвратаДиалога.ОК"", ""Отмена"", ""КодВозвратаДиалога.Отмена"", ""Повторить"", ""КодВозвратаДиалога.Повторить"", ""Прервать"", ""КодВозвратаДиалога.Прервать"", ""Пропустить"", ""КодВозвратаДиалога.Пропустить"", ""Тайаут"", ""КодВозвратаДиалога.Таймаут"">"}
},
{0,
{"Проверка типа",0,0,"Тип","Если ТипЗнч(<?""Выражение для проверки типа"">) = Тип(""<?""Выберите тип"", ВыборТипа>"") Тогда
	<?>
КонецЕсли;"}
},
{0,
{"КонструкторОписанияТипов",0,0,"","<?""Конструктор описания типов"", КонструкторОписанияТипов>"}
},
{0,
{"Истина",0,0,"Ис","Истина<?>"}
},
{0,
{"Ложь",0,0,"Ло","Ложь<?>"}
},
{0,
{"Новый",0,0,"Нов","Новый"}
},
{0,
{"бю",0,0,"бю","<>"}
},
{0,
{"Транз",0,0,"Транз","НачатьТранзакцию();
	<?>
ЗафиксироватьТранзакцию();"}
},
{0,
{"Пр",0,0,"Пр","Предупреждение(""<?>""+Символы.НПП+""!"");"}
},
{0,
{"ПечатьТЗ",0,0,"ПечатьТЗ","Функция орПечать(Коллекция, ЗаголовокТаблицы=""---"", ПараметрыПредыдущейПечати=Неопределено, ЗнаковПослеЗапятой=2, Путь="""") Экспорт
	
	Если ТипЗнч(ПараметрыПредыдущейПечати) <> Тип(""Структура"") Тогда
		
		Файл = Новый Файл(Путь);
		
		Если Файл.Существует() Тогда
			ВО = ВнешниеОбработки.Создать(Путь);
		Иначе
			Попытка
				ВО = Обработки.ПечатьКоллекцииЗначений.Создать();
			Исключение
				Предупреждение(""Не найдена обработка печати."",60); 
				Возврат 0;
			КонецПопытки; 
		КонецЕсли; 
		
	Иначе
		
		ВО = ПараметрыПредыдущейПечати.ОбработкаПечати;
		
	КонецЕсли; 
	
	ВО.Коллекция 	    = Коллекция;
	ВО.ДробнаяЧасть     = ЗнаковПослеЗапятой;
	ВО.Параметры		= ПараметрыПредыдущейПечати;
	ВО.ЗаголовокТаблицы = ЗаголовокТаблицы;
	
	Возврат ВО.Печать();
	
КонецФункции 
"}
},
{0,
{"ОбходРезультатаЗапроса",0,0,"орз","ОбходРезультатаЗапроса<?>"}
},
{0,
{"сз",0,0,"сз","Новый СписокЗначений;"}
},
{0,
{"стру",0,0,"стру","Новый Структура(""<?>"", )"}
},
{0,
{"соо",0,0,"соо","Новый Соответствие;"}
},
{0,
{"Ооб",0,0,"ооб","Обработки.<?Обработка>.Создать();
.ПолучитьФорму().Открыть();
"}
},
{0,
{"Оо",0,0,"оо","Отчеты.<?Отчет>.Создать();
.ПолучитьФорму().Открыть();
"}
},
{0,
{"Ово",0,0,"ово","ВнешниеОбработки.Создать(<?>);
.ПолучитьФорму().Открыть();
"}
},
{0,
{"Док.\",0,0,"Док.\","Документы.<?Документ>"}
},
{0,
{"Докс.\",0,0,"Докс.\","ДокументСсылка.<?Документ>"}
},
{0,
{"Док\",0,0,"Док\","<?Документ>"}
},
{0,
{"Спр.\",0,0,"Спр.\","Справочники.<?Справочник>"}
},
{0,
{"Спрс.\",0,0,"Спрс.\","СправочникСсылка.<?Справочник>"}
},
{0,
{"Спр\",0,0,"Спр\","<?Справочник>"}
},
{0,
{"Мас",0,0,"мас","Новый Массив;"}
},
{0,
{"удзнач",0,0,"удзнач","Для Инд =-(<?""Коллекция"">.Количество()-1) По 0 Цикл
	Если <?> Тогда
		<?""Коллекция"">.Удалить(-Инд);
	КонецЕсли; 
КонецЦикла; 
"}
},
{0,
{"удк",0,0,"удк","Для Каждого х Из <?""""> Цикл
	Если х.Значение = <?> Тогда
		<?"""">.Удалить(х.Ключ);
	КонецЕсли; 
КонецЦикла; 
"}
},
{0,
{"тз",0,0,"тз","Новый ТаблицаЗначений;"}
},
{0,
{"Сравнить.",0,0,"Сравнить.","Процедура Сравнить(Строка,НовСтрока) Экспорт
	
	ФайлСтар = Новый ТекстовыйДокумент;
	ФайлНов  = Новый ТекстовыйДокумент;
	
	ФайлСтар.ДобавитьСтроку(Строка);
	ФайлНов.ДобавитьСтроку(НовСтрока);
	
	ФайлСтар.Записать(""C:\Old.txt"");
	ФайлНов .Записать(""C:\New.txt"");

	Различия = Новый СравнениеФайлов();
	Различия.ПервыйФайл = ""C:\Old.txt"";
	Различия.ВторойФайл = ""C:\New.txt"";
	Различия.ИгнорироватьПустоеПространство = Истина;
	Различия.СпособСравнения = СпособСравненияФайлов.ТекстовыйДокумент;
	Различия.ПоказатьРазличия();
	
КонецПроцедуры
"}
},
{0,
{"си",0,0,"си","Символы<?>"}
},
{0,
{"кф",0,0,"кф","// Функция возвращает <?,"""">
// 
// Параметры:
//
// 		(Тип: ) - 
//  	(Тип: ) - 
//
// Возвращаемое значение:
// Тип					:
"}
},
{0,
{"кп",0,0,"кп","// Процедура 
// 
// Параметры:
//
// 		(Тип: ) - 
//  	(Тип: ) - 
"}
},
{0,
{"ко",0,0,"ко","// Процедура - обработчик события <?> формы
//"}
},
{0,
{"пвх.\",0,0,"пвх.\","ПланыВидовХарактеристик.<?"""", ПланВидовХарактеристик>;"}
},
{0,
{"пвхс.\",0,0,"пвхс.\","ПланВидовХарактеристикСсылка.<?"""", ПланВидовХарактеристик>"}
},
{0,
{"пвх\",0,0,"пвх\","<?ПланВидовХарактеристик>"}
},
{0,
{"сс",0,0,"сс","СтатусСообщения<?>"}
},
{0,
{"эф",0,0,"эф","ЭлементыФормы<?>  "}
},
{0,
{"меню.",0,0,"меню.","Попытка
	Меню = ВнешниеОбработки.Создать(""C:\Tools\Меню_Дерево.epf"");
	Меню.ПолучитьФорму().Открыть();
Исключение
КонецПопытки; "}
},
{0,
{"кор",0,0,"кор","// Процедура - обработчик события <?> элемента формы  
//"}
},
{0,
{"взнач",0,0,"взнач","ВосстановитьЗначение(""<?>"");"}
},
{0,
{"сзнач",0,0,"сзнач","СохранитьЗначение("""", <?>);"}
},
{0,
{"бко",0,0,"бко","////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
"}
},
{0,
{"бкор",0,0,"бкор","////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
"}
},
{0,
{"бпр",0,0,"бпр","////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
"}
},
{0,
{"РеквизитыЗаполнены.",0,0,"глРеквизитыЗаполнены.","Процедура РеквизитыЗаполнены(ЭлементыФормы, Отказ)

	Для Каждого х Из ЭлементыФормы Цикл
		Если ТипЗнч(х) = Тип(""ПолеВвода"") Тогда
			Если (х.АвтоОтметкаНезаполненного)
				и((х.Значение = 0)или(Строка(х.Значение) = """")) Тогда
				Сообщить(""Не заполнено поле ""+х.Данные,СтатусСообщения.Внимание); 
				Отказ = True;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Колонки = Новый Массив(); 
	Для Каждого х Из ЭлементыФормы.Товары.Колонки Цикл
		Если х.АвтоОтметкаНезаполненного Тогда
			Колонки.Добавить(х.Имя);
		КонецЕсли; 
	КонецЦикла; 
	
	Для Каждого х Из Товары Цикл
		Для Каждого у Из Колонки Цикл
			Если (Строка(х[у]) = """")или(х[у] = 0) Тогда
				Сообщить(""В строке ""+х.НомерСтроки+"" не заполнено поле ""+у,СтатусСообщения.Внимание); 
				Отказ = True;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры
 	
"}
},
{0,
{"коп",0,0,"коп","// Процедура - обработчик события <?> кнопки  панели  
//"}
},
{0,
{"кк",0,0,"кк","// Процедура - обработчик нажатия кнопки <?> панели ДействияФормы
//"}
},
{0,
{"ккп",0,0,"ккп","// Процедура - обработчик нажатия кнопки <?> меню  панели ДействияФормы
//"}
},
{0,
{"тд",0,0,"тд","ТекущиеДанные<?>"}
},
{0,
{"тс",0,0,"тс","ТекущаяСтрока<?>"}
},
{0,
{"Отбор",0,0,"Отбор","<?""Форма отбора"">.Отбор.<?""Поле отбора"">.Использование = Истина;
<?""Форма отбора"">.Отбор.<?""Поле отбора"">.ВидСравнения  = ВидСравнения.ВСписке;
<?""Форма отбора"">.Отбор.<?""Поле отбора"">.Значение      = <?>;
"}
},
{0,
{"оф",0,0,"оф","ПолучитьФорму( , ЭтаФорма);"}
},
{0,
{"во",0,0,"во","Предупреждение(""<?>""+Символы.НПП+""!""); 
Возврат;"}
},
{0,
{"со",0,0,"со","Сообщить(<?>);"}
},
{0,
{"Ош",0,0,"ош","СтрОшибки = ОписаниеОшибки();
Сообщить(<?>СтрОшибки, СтатусСообщения.Внимание);"}
},
{0,
{"ззс",0,0,"ззс","ЗаполнитьЗначенияСвойств(<?>, );"}
},
{0,
{"опп",0,0,"опп","ОбработкаПрерыванияПользователя();"}
},
{0,
{"сава",0,0,"сава","// САВА: Изменено
// ! САВА: Изменено
"}
},
{0,
{"знз",0,0,"знз","ЗначениеНеЗаполнено(<?>)"}
},
{0,
{"ПечатьДвижений",0,0,"ПечатьДвижений","Процедура НапечататьДвиженияДокумента(ДокументСсылка) Экспорт

	ПечатьДвиженийДокумента = Отчеты.ДвиженияДокумента.Создать();

	//Установим реквизиты и переменые отчета
	ПечатьДвиженийДокумента.Документ = ДокументСсылка;
	
	// Напечатаем движения
	ПечатьДвиженийДокумента.СформироватьИВывестиОтчет();
	 
КонецПроцедуры // НапечататьДвиженияДокумента()
"}
},
{0,
{"Зап",0,0,"Зап","Попытка
	<?""Объект"">.Записать();
Исключение
	Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание); 
КонецПопытки; 
"}
},
{0,
{"Об",0,0,"Об","Объект"}
},
{0,
{"Поб",0,0,"Поб","<?>.ПолучитьОбъект();"}
},
{0,
{"ЗаполнениеШапки",0,0,"ЗаполнениеШапки","// Для быстрого заполнения документа при тестировании (уже было написано ранее) 
// 
// Параметры:
//
Процедура ЗаполнениеШапки(Объект, ОбъектКопирования) Экспорт
	
	Если Объект.ЭтоНовый() и ЗначениеНеЗаполнено(ОбъектКопирования) Тогда
		
		//ИмяОбъекта = Объект.Метаданные().Имя;
		//
		//Объект.Подразделение = Справочники.Подразделения.АсторВЦ;
		//Объект.МестоХранения = Справочники.МестаХранения.Оптовый;
		//
		//Если 		ИмяОбъекта = ""ПриходнаяНакладная"" Тогда
		//	Объект.Контрагент = Справочники.Контрагенты.Авалон;
		//ИначеЕсли 	ИмяОбъекта = ""РасходнаяНакладная"" Тогда
		//	Объект.Контрагент = Справочники.Контрагенты.МедиаСервис;
		//КонецЕсли; 
		//
		//Запрос = Новый Запрос(""
		//|ВЫБРАТЬ ПЕРВЫЕ 3 
		//|   Ссылка КАК Номенклатура, Код КАК Количество, Код*10 КАК Цена, Код*Код*10 КАК Сумма 
		//|ИЗ 
		//|   Справочник.Номенклатура
		//|ГДЕ
		//|  Не ЭтоГруппа
		//|"");
		//
		//Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		//
		//Для Каждого Стр Из Объект.Товары Цикл
		//	
		//	Если 		ИмяОбъекта = ""ПриходнаяНакладная"" Тогда
		//		Стр.Количество = Стр.Количество*3;
		//	ИначеЕсли 	ИмяОбъекта = ""РасходнаяНакладная"" Тогда	
		//		Стр.Цена = Стр.Цена*1.2;
		//	КонецЕсли; 
		//	
		//	ПересчетСтроки(Стр, ""Цена"");
		//	
		//КонецЦикла; 
		
	КонецЕсли; 

КонецПроцедуры
"}
},
{0,
{"УстановитьШиринуКолонокОтчета",0,0,"УстановитьШиринуКолонокОтчета","Процедура УстановитьШиринуКолонокОтчета(Построитель, ТаблицаОтчета, ШиринаКолонкиСтрок, ШиринаКолонкиДанных) Экспорт
	
	КолонкиДанных = Новый Соответствие;  
	
	Для Каждого Поле Из Построитель.ВыбранныеПоля Цикл
		
		Если Не ШиринаКолонкиДанных = Неопределено Тогда
			Если  Построитель.ИзмеренияСтроки.Найти(Поле.Имя) = Неопределено 
				И Построитель.ИзмеренияКолонки.Найти(Поле.Имя) = Неопределено Тогда
				КолонкиДанных.Вставить(Поле.Представление, ШиринаКолонкиДанных);
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла;  
	
	Если Не ШиринаКолонкиСтрок = Неопределено Тогда
		
		ЗаголовокКолонкиСтрок = """";
		
		Для Каждого Поле Из Построитель.ИзмеренияСтроки Цикл
			Если Построитель.ИзмеренияКолонки.Найти(Поле.Имя) = Неопределено Тогда
				ЗаголовокКолонкиСтрок = ЗаголовокКолонкиСтрок + ?(ЗаголовокКолонкиСтрок="""", """", "" /""+Символы.ПС) + Поле.Представление;
			КонецЕсли; 
		КонецЦикла; 
		
		Если НЕ ЗаголовокКолонкиСтрок = """" Тогда
			КолонкиДанных.Вставить(ЗаголовокКолонкиСтрок, ШиринаКолонкиСтрок);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если Построитель.ИзмеренияКолонки.Количество() > 0 Тогда
		
		Шапка = ТаблицаОтчета.Области.Найти(""ШапкаСтрок"");
		
		Для Каждого Колонка Из КолонкиДанных Цикл
			
			Область = Шапка;
			
			Пока Истина Цикл
				
				Область = ТаблицаОтчета.НайтиТекст(Колонка.Ключ, Область, ТаблицаОтчета.Область(), Ложь, Истина, , Истина);
				
				Если Область <> Неопределено Тогда
					Область.ШиринаКолонки = Колонка.Значение;
					Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				Иначе
					Прервать;
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЦикла;
		
	Иначе
		
		Шапка = ТаблицаОтчета.Области.Найти(""ШапкаТаблицы"");
		
		Для Каждого Колонка Из КолонкиДанных Цикл
			
			Область = ТаблицаОтчета.НайтиТекст(Колонка.Ключ, , Шапка, Ложь, Истина, , Истина);
			
			Если Область <> Неопределено Тогда
				Область.ШиринаКолонки = Колонка.Значение;
				Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			КонецЕсли;	
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	
 КонецПроцедуры"}
},
{0,
{"Выбор",0,0,"Выбор","ВЫБОР КОГДА <?> ТОГДА  ИНАЧЕ 0 КОНЕЦ"}
},
{0,
{"ПрошлоВремени",0,0,"ПрошлоВремени","Функция ПрошлоВремени(Начало, Конец) 
	
	Вр 				= Конец - Начало;
	
	Ч 				= Цел(Вр/(3600));
	Вр 				= Вр - Ч*3600;
	М 				= Цел(Вр/60);
	Вр 				= Вр - М*60;
	С				= Вр;
	
	Возврат Формат(Дата(1, 1, 1, Ч, М, С), ""ДЛФ=T; ДП=0:00:00"");	
	
КонецФункции
"}
},
{0,
{"СтруктураМодуля",0,1,"СтруктураМодуля","////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КНОПОК ФОРМЫ И КОМАНДНЫХ ПАНЕЛЕЙ


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ
"}
},
{0,
{"Номенклатура",0,0,"номе","Номенклатура"}
},
{0,
{"Контрагенты",0,0,"ко","Контрагенты"}
},
{0,
{"МестаХранения",0,0,"мх","МестаХранения"}
},
{0,
{"Подразделения",0,0,"подр","Подразделения"}
},
{0,
{"ку.",0,0,"ку.","обПраво(""ОптимизироватьФормыДляРаботыНаКПК"",глПрава)"}
},
{0,
{"Клиент",0,0,"Клиент","#Если Клиент Тогда
#КонецЕсли 
"}
},
{0,
{"Кол",0,0,"Кол","Количество()"}
},
{0,
{"..",0,0,"..","//"}
},
{0,
{"НАчало",0,0,"НАч","Нач"}
},
{0,
{"НАчало",0,0,"НАчало","Начало"}
},
{0,
{"зпт",0,0,"зпт","?(="""", """", "","")"}
},
{0,
{"бюх",0,0,"бюх","<> Неопределено"}
},
{0,
{"кз",0,0,"кз","КлючЗначение"}
},
{0,
{"ОформленияСтрок",0,0,"Оформ","Для Каждого Оформление Из ОформленияСтрок Цикл
	ДанныеСтроки = Оформление.ДанныеСтроки;
    <?>
КонецЦикла; 
"}
},
{0,
{"ОформленияСтрок",0,0,"ОформленияСтрок","Для Каждого Оформление Из ОформленияСтрок Цикл
	ДанныеСтроки = Оформление.ДанныеСтроки;
    <?>
КонецЦикла; 
"}
},
{0,
{"кпк",0,0,"кпк","обПраво(""ОптимизироватьФормыДляРаботыНаНизкомРазрешении"", глПрава)"}
}
},
{0,
{"Отладка",0,0,"Отладка","#Если Клиент Тогда
Диски = Новый Структура(""C,D,E,F,G,H,Z,Y,X"");
Обр = Неопределено;
Для Каждого Диск Из Диски Цикл
	Попытка
		Обр = ВнешниеОбработки.Создать(Диск.Ключ+"":\Tools\Отладка.epf"");
		Прервать;
	Исключение // на сетевом диске
		Попытка
			Обр = ВнешниеОбработки.Создать(Диск.Ключ+"":\Отладка.epf"");
			Прервать;
		Исключение КонецПопытки; 
	КонецПопытки; 
КонецЦикла;
Если Обр <> Неопределено Тогда
	Обр. = ;
	Обр.ОтлаживаемаяПроцедура();
	Результат = Обр.ОтлаживаемаяФункция();
Иначе
	ОчиститьСообщения();
	Сообщить(""Не найден внешний модуль.""); 
КонецЕсли; 
#КонецЕсли"}
},
{0,
{"ФормаОтладки",0,0,"ФормаОтладки","	// ТЕСТОВОЕ
	Диски = Новый Структура(""D,E,F,G,H,C,Z,Y,X"");
	Если ПараметрыСеанса.ЯзыкВводаДанных.КодЯзыка = ""be_BY"" Тогда
		Найден = Ложь; 
		Для Каждого Диск Из Диски Цикл
			Попытка
				ФормаОтладки = ВнешниеОбработки.Создать(Диск.Ключ+"":\Доработки и ТЗ\.epf"").ПолучитьФорму();
				Найден = Истина; 
				Прервать;
			Исключение
			КонецПопытки; 
		КонецЦикла; 
		Если НЕ Найден Тогда
			Сообщить(""Не найден внешний модуль""); 
		Иначе	
			ЗаполнитьЗначенияСвойств(ФормаОтладки, ЭтаФорма);
			ФормаОтладки.Открыть();
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	// ! ТЕСТОВОЕ 
"}
}
}
}