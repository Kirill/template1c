{1,
{11,
{"Development (v1.6 08.01.2010) ",1,0,"",""},
{12,
{"Управляющие",1,0,"",""},
{0,
{"Если",0,0,"Есл[и]","Если <?> Тогда
	
КонецЕсли;"}
},
{0,
{"ИначеЕсли",0,0,"ИначеЕ[сли]","ИначеЕсли <?> Тогда"}
},
{0,
{"Пока",0,0,"Пока","Пока <?> Цикл
		
КонецЦикла;"}
},
{0,
{"Для",0,0,"Для","Для <?> По  Цикл
	
КонецЦикла;"}
},
{0,
{"Для каждого",0,0,"Для[ Каждого]","Для Каждого <?> Из  Цикл
	
КонецЦикла;"}
},
{0,
{"Процедура",0,0,"Проц[едура]","//
//
Процедура <?>()
		
КонецПроцедуры
"}
},
{0,
{"Функция",0,0,"Функ[ция]","//
//
Функция <?>()
		
КонецФункции
"}
},
{0,
{"Попытка",0,0,"Попы[тка]","Попытка
	<?>
Исключение
    //Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
КонецПопытки;"}
},
{0,
{"Вызвать исключение",0,0,"Выз[ватьИсключение]","ВызватьИсключение ""<?>"";"}
},
{0,
{"?(,,)",0,0,"?(","?(,,)"}
},
{0,
{"?(,,)",0,0,",(","?(,,)"}
},
{0,
{"Перем",0,0,"Пер[ем]","Перем <?""Введите имя переменной""><?"""", ВыборВарианта, ""Не экспортируемая"", "";"", ""Экспортируемая"","" Экспорт;"">"}
}
},
{6,
{"Прочие",1,0,"",""},
{0,
{"Формат",0,0,"Фор[мат]","Формат(<?>, ""<?, ФорматнаяСтрока>"")"}
},
{0,
{"Конструктор описания типов",0,1,"","<?""Конструктор описания типов"", КонструкторОписанияТипов>"}
},
{0,
{"Проверка типа",0,1,"","Если ТипЗнч(<?""Выражение для проверки типа"">) = Тип(""<?""Выберите тип"", ВыборТипа>"") Тогда

	<?>

КонецЕсли;"}
},
{0,
{"Шрифт",0,0,"Шри[фт=]","//	КОНСТРУКТОР Имя шрифта, Размер, Жирный, Наклонный, Подчеркнутый, Зачеркнутый
Шрифт = Новый Шрифт(<?>, , , , , );"}
},
{0,
{"ЧислоПрописью",0,0,"Число[Прописью]","ЧислоПрописью(<?>,,""рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2"")"}
},
{0,
{"Неопределено",0,0,"Нео[пределено]","Неопределено<?>"}
}
},
{12,
{"Раскладка клавиатуры",1,0,"",""},
{0,
{">",0,0,"Ю",">"}
},
{0,
{"<",0,0,"Б","<"}
},
{0,
{"<>",0,0,"БЮ","<>"}
},
{0,
{"<=",0,0,"Б=","<="}
},
{0,
{">=",0,0,"Ю=",">="}
},
{0,
{"ЕстьТгдд",0,0,"ЕстьТ[гдд]","ЕстьNULL(<?>, 0)"}
},
{0,
{"NULL",0,0,"тгдд","NULL"}
},
{0,
{"[]",0,0,"хъ","[<?>]"}
},
{0,
{"|",0,0,"\ ","|  <?>"}
},
{0,
{"'",0,0,"ээ","'<?>'"}
},
{0,
{"&",0,0,"? ","&<?>"}
},
{0,
{"WebЦвета",0,0,"цуиц[вета]","WebЦвета"}
}
},
{8,
{"Коллекции значений",1,0,"",""},
{0,
{"Таблица значений",0,0,"тз=","тз = Новый ТаблицаЗначений;
<?>"}
},
{0,
{"Список значений",0,0,"сз=","сз = Новый СписокЗначений;
<?>"}
},
{0,
{"Структура",0,0,"ст=","Структура = Новый Структура;
<?>"}
},
{0,
{"Соответствие",0,0,"Соо[тветствие=]","Соответствие = Новый Соответствие;
<?>"}
},
{0,
{"ДеревоЗначений",0,0,"ДеревоЗ[начений=]","ДеревоЗначений = Новый ДеревоЗначений;
<?>"}
},
{0,
{"Массив",0,0,"Мас[сив=]","Массив = Новый Массив(<?>);"}
},
{0,
{"Добавить колонку",0,0,"Коло[нки.Добавить]","Колонки.Добавить(""<?>"");"}
},
{0,
{"Новая cтрока",0,0,"Нов[аяСтрока]","НоваяСтрока = <?>.Добавить();"}
}
},
{14,
{"Запросы",1,0,"",""},
{0,
{"Выборка",0,0,"Выб[орка=]","Выборка = <?>.Выбрать();
Пока Выборка.Следующий() Цикл

КонецЦикла; "}
},
{0,
{"Запрос с конструктором",0,0,"Зап[рос=]","Запрос = Новый Запрос;
Запрос.Текст = ""<?"""", ТекстЗапроса>"";
Запрос.УстановитьПараметр("""", <?>);

РезультатЗапроса = Запрос.Выполнить();
"}
},
{0,
{"Запрос вручную",0,0,"Зап[рос=]","Запрос = Новый Запрос;
Запрос.УстановитьПараметр("""",);

ТекстЗапроса = ""
		|ВЫБРАТЬ
		|   <?>
		|
		|"";

Запрос.Текст = ТекстЗапроса;
РезультатЗапроса = Запрос.Выполнить();"}
},
{0,
{"ВЫБОР",0,0,"ВЫБОР","ВЫБОР КОГДА <?> ТОГДА ИНАЧЕ КОНЕЦ"}
},
{0,
{"Документ",0,0,"Док[умент.]","Документ.<?"""", ОбъектМетаданных, ""Документ"", ""Документ.ТабличнаяЧасть"">"}
},
{0,
{"Справочник",0,0,"Спр[авочник.]","Справочник.<?"""", ОбъектМетаданных, ""Справочник"", ""Справочник.ТабличнаяЧасть"">"}
},
{0,
{"Перечисление",0,0,"Переч[исление.]","Перечисление.<?"""", ОбъектМетаданных, ""Перечисление"">"}
},
{0,
{"РегистрСведений",0,0,"Рег[истрСведений.]","РегистрСведений.<?"""", ОбъектМетаданных, ""РегистрСведений""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""СрезПервых"", "".СрезПервых(<?>)"", ""СрезПоследних"", "".СрехПоследних(<?>)"">"}
},
{0,
{"РегистрНакопления",0,0,"Рег[истрНакопления.]","РегистрНакопления.<?"""", ОбъектМетаданных, ""РегистрНакопления""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""Остатки"", "".Остатки(<?>)"", ""Обороты"", "".Обороты(<?>)"", ""ОстаткиИОбороты"", "".ОстаткиИОбороты(<?>)"">"}
},
{0,
{"РегистрБухгалтерии",0,0,"Рег[истрБухгалтерии.]","РегистрБухгалтерии.<?"""", ОбъектМетаданных, ""РегистрБухгалтерии""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""Субконто"", "".Субконто"", ""ДвиженияССубконто"", "".ДвиженияССубконто(<?>)"", ""Остатки"", "".Остатки(<?>)"", ""Обороты"", "".Обороты(<?>)"", ""ОстаткиИОбороты"", "".ОстаткиИОбороты(<?>)"", ""ОборотыДтКт"", "".ОборотыДтКт(<?>)"">"}
},
{0,
{"РегистрРасчета",0,0,"Рег[истрРасчета.]","РегистрРасчета.<?"""", ОбъектМетаданных, ""РегистрРасчета"", ""РегистрРасчета.Перерасчет"">"}
},
{0,
{"ЛЕВОЕ СОЕДИНЕНИЕ",0,0,"ЛЕВОЕ","ЛЕВОЕ СОЕДИНЕНИЕ"}
},
{0,
{"ПРАВОЕ СОЕДИНЕНИЕ",0,0,"ПРАВОЕ","ПРАВОЕ СОЕДИНЕНИЕ"}
},
{0,
{"Установить параметр",0,0,"Уст[ановитьПараметр]","УстановитьПараметр(""<?>"",);"}
}
},
{2,
{"Построитель отчета",1,0,"",""},
{0,
{"Построитель вручную",0,0,"Пос[троитель=]","Построитель = Новый ПостроительОтчета;
Построитель.Текст = ""
|ВЫБРАТЬ
|   <?>
|
|
|
|
|
|
|
|"";
Построитель.ЗаполнитьНастройки();
Построитель.Параметры.Вставить("""", );
Построитель.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Лето);
Построитель.Выполнить();"}
},
{0,
{"Построитель конструктором",0,0,"Пос[троитель=]","Построитель = Новый ПостроительОтчета;
Построитель.Текст = ""<?"""", ТекстЗапроса>"";
Построитель.Параметры.Вставить("""", );
Построитель.ЗаполнитьНастройки();
Построитель.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Лето);
Построитель.Выполнить();"}
}
},
{9,
{"Диалоговые",1,0,"",""},
{0,
{"ВыборФайла",0,1,"Выб[орФайла=]","ВыборФайла = Новый ДиалогВыбораФайла(<?"""", ВыборВарианта, ""Открытие"", ""РежимДиалогаВыбораФайла.Открытие"", ""Сохранение"", ""РежимДиалогаВыбораФайла.Сохранение"", ""ВыборКаталога"", ""РежимДиалогаВыбораФайла.ВыборКаталога"">);
ВыборФайла.ПолноеИмяФайла = <?>;
Если Не ВыборФайла.Выбрать() Тогда
	Возврат;		
КонецЕсли;"}
},
{0,
{"Сообщить",0,0,"Сооб[щить(]","Сообщить(<?>, СтатусСообщения.Обычное);"}
},
{0,
{"Предупреждение",0,0,"Пре[дупреждение]","Предупреждение(<?>,30);"}
},
{0,
{"Вопрос",0,0,"Воп[рос=]","Ответ = Вопрос(""<?""Текст вопроса"">"", <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60)"}
},
{0,
{"Вопрос с анализом результата",0,0,"Отв[ет=]","Ответ = Вопрос(""<?""Текст вопроса"">"", <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);
Если Ответ <?"""", ВыборВарианта, ""Равен"", ""="", ""Не равен"", ""<>""> <?""Код возврата диалога"", ВыборВарианта, ""Да"", ""КодВозвратаДиалога.Да"", ""Нет"", ""КодВозвратаДиалога.Нет"", ""ОК"", ""КодВозвратаДиалога.ОК"", ""Отмена"", ""КодВозвратаДиалога.Отмена"", ""Повторить"", ""КодВозвратаДиалога.Повторить"", ""Прервать"", ""КодВозвратаДиалога.Прервать"", ""Пропустить"", ""КодВозвратаДиалога.Пропустить"", ""Тайаут"", ""КодВозвратаДиалога.Таймаут""> Тогда
	<?>
КонецЕсли; "}
},
{0,
{"Информация об ошибке",0,0,"Инфо[рмацияОбОшибке(]","ИнфоОшибки = ИнформацияОбОшибке();
Сообщить(""Описание = '"" + ИнфоОшибки.Описание + ""'"", СтатусСообщения.Внимание);
Сообщить(""Модуль = '"" + ИнфоОшибки.ИмяМодуля + ""'"", СтатусСообщения.Важное);
Сообщить(""НомерСтроки = '"" + ИнфоОшибки.НомерСтроки + ""'"", СтатусСообщения.Важное);
Сообщить(""ИсходнаяСтрока = '"" + ИнфоОшибки.ИсходнаяСтрока + ""'"", СтатусСообщения.Важное);"}
},
{0,
{"Открыть значение",0,0,"Откр[ытьЗначение]","ОткрытьЗначение(<?>);"}
},
{0,
{"Состояние",0,0,"Сос[тояние(]","Состояние(<?>);"}
},
{4,
{"Функции для вызова диалога ввода данных",1,0,"",""},
{0,
{"Ввести дату",0,0,"Ввести[Дату]","РезультатВвода = ВвестиДату(<?>, ""Укажите дату"", ЧастиДаты.<?""Части даты"", ВыборВарианта, ""Дата"", ""Дата"", ""Дата и время"", ""ДатаВремя"", ""Время"", ""Время"">);"}
},
{0,
{"Ввести значение",0,0,"Ввести[Значение]","РезультатВвода = ВвестиЗначение(<?>, ""Введите "", Тип(""<?"""", ВыборТипа>""));"}
},
{0,
{"Ввести строку",0,0,"Ввести[Строку]","РезультатВвода = ВвестиСтроку(<?>, ""Введите "", <?""Длина строки"">, <?"""", ВыборВарианта, ""Не многострочная"", ""Ложь"", ""Многострочная"", ""Истина"">);"}
},
{0,
{"Ввести число",0,0,"Ввести[Число]","РезультатВвода = ВвестиЧисло(<?>, ""Введите "", <?""Длина"">, <?""Точность"">);"}
}
}
},
{2,
{"Табличный документ",1,0,"",""},
{0,
{"ПолучитьОбласть",0,0,"Обл[асть=]","Область<?""Название области""> = <?>.ПолучитьОбласть(""<?""Название области"">"");"}
},
{0,
{"Макет",0,0,"Мак[ет=]","Макет = ПолучитьМакет(<?>);"}
}
},
{2,
{"Инструкции предпроцессору",1,0,"",""},
{0,
{"#Если",0,0,"№Ес[ли]","#Если <?"""", ВыборВарианта, ""Клиент"", ""Клиент"", ""Сервер"", ""Сервер"", ""ВнешнееСоединение"", ""ВнешнееСоединение""> Тогда
    <?> 	
#КонецЕсли"}
},
{0,
{"#Если",0,0,"#Ес[ли]","#Если <?"""", ВыборВарианта, ""Клиент"", ""Клиент"", ""Сервер"", ""Сервер"", ""ВнешнееСоединение"", ""ВнешнееСоединение""> Тогда
    <?> 	
#КонецЕсли"}
}
},
{14,
{"Прикладные",1,0,"",""},
{0,
{"ВыборСчетаДт",0,0,"СчетДт=","СчетДт = <?"""", ПланСчетовПредопределенныеДанные>;"}
},
{0,
{"ВыборСчетаКт",0,0,"СчетКт=","СчетКт = <?"""", ПланСчетовПредопределенныеДанные>;"}
},
{1,
{"Константы",1,0,"",""},
{0,
{"Получить/установить",0,0,"Конст[анты]","Константы.<?"""", Константа>.<?""Выбор метода"", ВыборВарианта, ""Получить"", ""Получить"", ""Установить"", ""Установить"">()"}
}
},
{5,
{"Справочники",1,0,"",""},
{0,
{"Обход элементов справочника",0,0,"Справоч[никВыборка]","Выборка = Справочники.<?"""", Справочник>.<?"""", ВыборВарианта, ""Выбрать"", ""Выбрать"", ""Выбрать иерархически"", ""ВыбратьИерархически"">();
Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Найти по коду элемент справочника",0,0,"Найти[ПоКоду]","НайденныйЭлемент = Справочники.<?"""", Справочник>.НайтиПоКоду(<?>);"}
},
{0,
{"Найти по наименованию элемент справочника",0,0,"Найти[ПоНаименованию]","НайденныйЭлемент = Справочники.<?"""", Справочник>.НайтиПоНаименованию(<?>);"}
},
{0,
{"Найти по реквизиту элемент справочника",0,0,"Найти[ПоРеквизиту]","НайденныйЭлемент = Справочники.<?"""", Справочник>.НайтиПоРеквизиту(<?>);"}
},
{0,
{"Предопределенный элемент справочника",0,0,"Пред[определенный]","<?"""", СправочникПредопределенныеДанные>"}
}
},
{2,
{"Документы",1,0,"",""},
{0,
{"Обход документов",0,0,"","Выборка = Документы.<?"""", Документ>.Выбрать();
Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Движения",0,0,"Дви[жения]","Движения.<?""Выбор регистра"", ОбъектМетаданных, ""РегистрСведений"", ""РегистрНакопления"", ""РегистрБухгалтерии"", ""РегистрРасчета"">"}
}
},
{2,
{"Отчеты",1,0,"",""},
{0,
{"Создать отчет",0,0,"Отч[еты]","ОтчетОбъект = Отчеты.<?"""", Отчет>.Создать();
<?>"}
},
{0,
{"Открыть форму отчета",0,0,"Отч[еты]","ФормаОтчета = Отчеты.<?"""", Отчет>.ПолучитьФорму(<?>);
Если ФормаОтчета.Открыта() Тогда
	ФормаОтчета.Активизировать();
Иначе
	ФормаОтчета.Открыть();
КонецЕсли;"}
}
},
{2,
{"Обработки",1,0,"",""},
{0,
{"Создать обработку",0,0,"Обра[ботки]","ОбработкаОбъект = Обработки.<?"""", Обработка>.Создать();
<?>"}
},
{0,
{"Открыть форму обработки",0,0,"Обра[ботки]","ФормаОбработки = Обработки.<?"""", Обработка>.ПолучитьФорму(<?>);
Если ФормаОбработки.Открыта() Тогда
	ФормаОбработки.Активизировать();
Иначе
	ФормаОбработки.Открыть();
КонецЕсли;"}
}
},
{5,
{"Планы видов характеристик",1,0,"",""},
{0,
{"Обход элементов видов характеристик",0,0,"ПланВ[идовХарактеристикВыборка]","Выборка = ПланыВидовХарактеристик.<?"""", ПланВидовХарактеристик>.<?"""", ВыборВарианта, ""Выбрать"", ""Выбрать"", ""Выбрать иерархически"", ""ВыбратьИерархически"">();
Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Найти по коду элемент ПВХ",0,0,"Найти[ПоКоду]","НайденныйЭлемент = ПланыВидовХарактеристик.<?"""", ПланВидовХарактеристик>.НайтиПоКоду(<?>);"}
},
{0,
{"Найти по наименованию элемент ПВХ",0,0,"Найти[ПоНаименованию]","НайденныйЭлемент = ПланыВидовХарактеристик.<?"""", ПланВидовХарактеристик>.НайтиПоНаименованию(<?>);"}
},
{0,
{"Найти по реквизиту элемент ПВХ",0,0,"Найти[ПоРеквизиту]","НайденныйЭлемент = ПланыВидовХарактеристик.<?"""", ПланВидовХарактеристик>.НайтиПоРеквизиту(<?>);"}
},
{0,
{"Предопределенный элемент ПВХ",0,0,"Пред[определенный]","<?"""", ПланВидовХарактеристикПредопределенныеДанные>"}
}
},
{5,
{"Планы счетов",1,0,"",""},
{0,
{"Обход элементов плана счетов",0,0,"ПланС[четовВыборка]","Выборка = ПланыСчетов.<?"""", ПланСчетов>.<?"""", ВыборВарианта, ""Выбрать"", ""Выбрать"", ""Выбрать иерархически"", ""ВыбратьИерархически"">();
Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Найти по коду элемент ПС",0,0,"Найти[ПоКоду]","НайденныйЭлемент = ПланыСчетов.<?"""", ПланСчетов>.НайтиПоКоду(<?>);"}
},
{0,
{"Найти по наименованию элемент ПС",0,0,"Найти[ПоНаименованию]","НайденныйЭлемент = ПланыСчетов.<?"""", ПланСчетов>.НайтиПоНаименованию(<?>);"}
},
{0,
{"Найти по реквизиту элемент ПС",0,0,"Найти[ПоРеквизиту]","НайденныйЭлемент = ПланыСчетов.<?"""", ПланСчетов>.НайтиПоРеквизиту(<?>);"}
},
{0,
{"Предопределенный элемент ПС",0,0,"Пред[определенный]","<?"""", ПланСчетовПредопределенныеДанные>"}
}
},
{5,
{"Планы видов расчета",1,0,"",""},
{0,
{"Обход видов расчета",0,0,"ПланВ[идовРасчетаВыборка]","Выборка = ПланыВидовРасчета.<?"""", ПланВидовРасчета>.Выбрать();
Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Найти по коду элемент ПВР",0,0,"Найти[ПоКоду]","НайденныйЭлемент = ПланыВидовРасчета.<?"""", ПланВидовРасчета>.НайтиПоКоду(<?>);"}
},
{0,
{"Найти по наименованию элемент ПВР",0,0,"Найти[ПоНаименованию]","НайденныйЭлемент = ПланыВидовРасчета.<?"""", ПланВидовРасчета>.НайтиПоНаименованию(<?>);"}
},
{0,
{"Найти по реквизиту элемент ПВР",0,0,"Найти[ПоРеквизиту]","НайденныйЭлемент = ПланыВидовРасчета.<?"""", ПланВидовРасчета>.НайтиПоРеквизиту(<?>);"}
},
{0,
{"Предопределенный элемент ПВХ",0,0,"Пред[определенный]","<?"""", ПланВидовРасчетаПредопределенныеДанные>"}
}
},
{1,
{"Бизнес-процессы",1,0,"",""},
{0,
{"Обход бизнес-процессов",0,0,"","Выборка = БизнесПроцессы.<?"""", БизнесПроцесс>.Выбрать();
Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{1,
{"Задачи",1,0,"",""},
{0,
{"Обход задач",0,0,"","Выборка = Задачи.<?"""", Задача>.Выбрать();
Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{1,
{"Перечисления",1,0,"",""},
{0,
{"Значение перечисления",0,0,"Переч[исления]","Перечисления.<?"""", ЗначениеПеречисления>"}
}
},
{4,
{"НаборЗаписей",1,0,"",""},
{0,
{"Регистр сведений",0,0,"НаборЗ[аписей=]","НаборЗаписей = РегистрыСведений.<?"""", РегистрСведений>.СоздатьНаборЗаписей();
"}
},
{0,
{"Регистр накопления",0,0,"НаборЗ[аписей=]","НаборЗаписей = РегистрыНакопления.<?"""", РегистрНакопления>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"Регистр бухгалтерии",0,0,"НаборЗ[аписей=]","НаборЗаписей = РегистрыБухгалтерии.<?"""", РегистрБухгалтерии>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"Регистр расчета",0,0,"НаборЗ[аписей=]","НаборЗаписей = РегистрыРасчета.<?"""", РегистрРасчета>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
}
}
},
{2,
{"Шаблоны модулей",1,0,"",""},
{2,
{"Справочники",1,0,"",""},
{0,
{"Модуль формы",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ <Наименование>

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
"}
},
{0,
{"Модуль объекта",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
"}
}
},
{2,
{"Документы",1,0,"",""},
{0,
{"Модуль формы",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ <Наименование>

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

"}
},
{0,
{"Модуль объекта",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
"}
}
}
}
}
}